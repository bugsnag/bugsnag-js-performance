#!/usr/bin/env node

const { promises: fs, existsSync } = require('node:fs')
const path = require('path')
  
const BUGSNAG_COCOA_IMPORT = '#import <Bugsnag/Bugsnag.h>'
const BUGSNAG_COCOA_INIT = '[Bugsnag start];'
const COCOA_APP_LAUNCH_REGEX = /(-\s*\(BOOL\)\s*application:\s*\(UIApplication\s\*\)\s*application\s+didFinishLaunchingWithOptions:\s*\(NSDictionary\s*\*\)launchOptions\s*\{\s*)\S/

const BUGSNAG_JAVA_IMPORT = 'import com.bugsnag.android.Bugsnag;'
const BUGSNAG_JAVA_INIT = 'Bugsnag.start(this);'
const BUGSNAG_DISABLE_BAGP = 'bugsnag.enabled = false'

const BUGSNAG_KOTLIN_IMPORT = 'import com.bugsnag.android.Bugsnag'
const BUGSNAG_KOTLIN_INIT = 'Bugsnag.start(this)'

const BUGSNAG_JS_IMPORT = 'import Bugsnag from "@bugsnag/react-native";'
const BUGSNAG_JS_INIT = 'Bugsnag.start();'

const DOCS_LINK = 'https://docs.bugsnag.com/platforms/react-native/react-native/#basic-configuration'
const FAIL_MSG = (filename) =>
  `Failed to update "${filename}" automatically. The file may not exist or it may be in an unexpected format or location.

Bugsnag must be imported manually. See ${DOCS_LINK} for more information.`

async function removeIos(projectRoot) {
  console.info('Removing Bugsnag startup code from the iOS layer')

  const iosDir = path.join(projectRoot, 'ios')
  let appDelegatePath

  try {
    const xcodeprojDir = (await fs.readdir(iosDir)).find(p => p.endsWith('.xcodeproj'))

    if (!xcodeprojDir) {
      console.warn(FAIL_MSG('AppDelegate'))
      return
    }

    const appDelegateDirectory = path.join(iosDir, xcodeprojDir.replace(/\.xcodeproj$/, ''))

    // handle both AppDelegate.m and AppDelegate.mm (RN 0.68+)
    const appDelegateFile = (await fs.readdir(appDelegateDirectory)).find(p => p.startsWith('AppDelegate.m'))

    if (!appDelegateFile) {
      console.warn(FAIL_MSG('AppDelegate'))
      return
    }

    appDelegatePath = path.join(iosDir, xcodeprojDir.replace(/\.xcodeproj$/, ''), appDelegateFile)
  } catch (e) {
    console.error(FAIL_MSG('AppDelegate'))
    return
  }

  try {
    const appDelegate = await fs.readFile(appDelegatePath, 'utf8')

    if (!appDelegate.includes(BUGSNAG_COCOA_IMPORT) || !appDelegate.includes(BUGSNAG_COCOA_INIT)) {
      console.warn('react-native-cli initialisation not present, skipping')
      return
    }

    await fs.writeFile(
      appDelegatePath,
      appDelegate.replace(BUGSNAG_COCOA_INIT, '').replace(BUGSNAG_COCOA_IMPORT, ''),
      'utf8'
    )

    console.log('Done')
  } catch (e) {
    console.error(FAIL_MSG(path.basename(appDelegatePath)))
  }
}

async function removeAndroid (projectRoot) {
  console.info('Removing Bugsnag startup code from the Android layer')

  let mainApplicationPath
  try {
    const javaDir = path.join(projectRoot, 'android', 'app', 'src', 'main', 'java', 'com', 'bugsnag', 'fixtures', 'reactnative', 'performance')
    const javaPath = path.join(javaDir, 'MainApplication.java')
    const kotlinPath = path.join(javaDir, 'MainApplication.kt')

    if (!existsSync(javaPath) && !existsSync(kotlinPath)) {
      console.error('MainApplication.java or MainApplication.kt not found in the Android source directory')
      return console.warn(FAIL_MSG('MainApplication'))
    }

    mainApplicationPath = existsSync(kotlinPath) ? kotlinPath : javaExists
  } catch (e) {
    console.error(e)
    return console.warn(FAIL_MSG('MainApplication'))
  }

  try {
    const isKotlin = path.extname(mainApplicationPath) === '.kt'
    const bugsnagImport = isKotlin ? BUGSNAG_KOTLIN_IMPORT : BUGSNAG_JAVA_IMPORT
    const bugsnagInit = isKotlin ? BUGSNAG_KOTLIN_INIT : BUGSNAG_JAVA_INIT

    const mainApplication = await fs.readFile(mainApplicationPath, 'utf8')
    if (mainApplication.includes(bugsnagImport) || mainApplication.includes(bugsnagInit)) {
      const mainApplicationAdjusted = mainApplication.replace(bugsnagImport, '')
      await fs.writeFile(mainApplicationPath, mainApplicationAdjusted.replace(bugsnagInit, ''), 'utf8')
      console.log('Done')
      return
    }

    console.warn('Bugsnag has already been removed, skipping')
    return
  } catch (e) {
    console.error(e)
    console.error(FAIL_MSG('MainApplication'))
  }
}

async function disableGradlePlugin (projectRoot) {
  console.info('Disabling Bugsnag android gradle plugin')

  const gradlePath = path.join(projectRoot, 'android', 'app', 'build.gradle')
  const gradleFile = await fs.readFile(gradlePath, 'utf8')

  if (gradleFile.includes(BUGSNAG_DISABLE_BAGP)) {
    return console.warn('Bugsnag android gradle plugin has already been disabled in the build.gradle file, skipping')
  }

  try {
    await fs.writeFile(gradlePath, `${gradleFile}\n${BUGSNAG_DISABLE_BAGP}`, 'utf8')
    console.info('Done')
  } catch (e) {
    console.error(FAIL_MSG('build.gradle'))
  }
}

async function modifyAndroidSource (projectRoot) {
  await removeAndroid(projectRoot)
  await disableGradlePlugin(projectRoot)
}

async function modifyIosSource (projectRoot) {
  await removeIos(projectRoot)
}

async function modifyJsSource (projectRoot) {
  console.info('Removing Bugsnag startup code from the JS layer')

  const jsPath = path.join(projectRoot, 'index.js')
  const jsFile = await fs.readFile(jsPath, 'utf8')

  if (jsFile.includes(BUGSNAG_JS_IMPORT) || jsFile.includes(BUGSNAG_JS_INIT)) {
    await fs.writeFile(jsPath, jsFile.replace(BUGSNAG_JS_IMPORT, '').replace(BUGSNAG_JS_INIT, ''), 'utf8')
    console.log('Done')
    return
  }

  console.warn('Bugsnag has already been removed, skipping')
}

module.exports.modifyAndroidSource = modifyAndroidSource
module.exports.modifyIosSource = modifyIosSource
module.exports.modifyJsSource = modifyJsSource
module.exports.removeAndroid = modifyAndroidSource
module.exports.removeIos = modifyIosSource
