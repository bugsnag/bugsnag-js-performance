#!/usr/bin/env node

const { execFileSync, execSync } = require('child_process')
const { resolve } = require('path')
const fs = require('fs')

if (!process.env.RN_VERSION) {
  console.error('Please provide a React Native version')
  process.exit(1)
}

const rnVersion = process.env.RN_VERSION
const ROOT_DIR = resolve(__dirname, '../')

let fixturePath = 'test/react-native/features/fixtures/generated/'
if (process.env.RCT_NEW_ARCH_ENABLED === 'true' || process.env.RCT_NEW_ARCH_ENABLED === '1') {
  fixturePath += 'newarch/'
} else {
  fixturePath += 'oldarch/'
}

const fixtureDir = resolve(ROOT_DIR, fixturePath, rnVersion)

const PACKAGE_NAMES = [
  '@bugsnag/core-performance',
  '@bugsnag/react-native-performance',
  '@bugsnag/react-navigation-performance',
  '@bugsnag/delivery-fetch-performance',
  '@bugsnag/request-tracker-performance'
]

const PACKAGE_DIRECTORIES = [
  `${ROOT_DIR}/packages/core`,
  `${ROOT_DIR}/packages/delivery-fetch`,
  `${ROOT_DIR}/packages/react-navigation`,
  `${ROOT_DIR}/packages/request-tracker`,
  `${ROOT_DIR}/packages/platforms/react-native`,
  `${ROOT_DIR}/test/react-native/features/fixtures/scenario-launcher`,
]

if (!process.env.SKIP_BUILD_PACKAGES) {
  // run npm install in the root directory
  execFileSync('npm', ['install'], { cwd: ROOT_DIR, stdio: 'inherit' })

  // build the packages
  const buildArgs = ['run', 'build', '--scope', PACKAGE_NAMES.join(' --scope ')]
  execFileSync('npm', buildArgs, { cwd: ROOT_DIR, stdio: 'inherit', env: { ...process.env, ENABLE_TEST_CONFIGURATION: 1 } })
}

if (!process.env.SKIP_GENERATE_FIXTURE) {
  // remove the fixture directory if it already exists
  if (fs.existsSync(fixtureDir)) {
    fs.rmSync(fixtureDir, { recursive: true, force: true })
  }

  // create the test fixture
  const RNInitArgs = ['react-native', 'init', 'reactnative', '--package-name', 'com.bugsnag.fixtures.reactnative.performance', '--directory', fixtureDir, '--version', rnVersion, '--npm', '--skip-install']
  execFileSync('npx', RNInitArgs, { stdio: 'inherit' })
  
  // replace the App.tsx file with our own App.js file
  fs.unlinkSync(resolve(fixtureDir, 'App.tsx'))
  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/App.js'),
    resolve(fixtureDir, 'App.js')
  )

  // replace the AndroidManifest.xml file with our own
  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/android/AndroidManifest.xml'),
    resolve(fixtureDir, 'android/app/src/main/AndroidManifest.xml')
  )

  // replace the Info.plist file with our own
  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/Info.plist'),
    resolve(fixtureDir, 'ios/reactnative/Info.plist')
  )

  // copy the exportOptions.plist file
  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/exportOptions.plist'),
    resolve(fixtureDir, 'exportOptions.plist')
  )

  // copy the .env file
  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/env'),
    resolve(fixtureDir, '.env')
  )

  // replace the babel.config.js file
  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/babel.config.js'),
    resolve(fixtureDir, 'babel.config.js')
  )

  // pack the required packages into the fixture directory
  for (const package of PACKAGE_DIRECTORIES) {
    const libraryPackArgs = ['pack', package, '--pack-destination', fixtureDir]
    execFileSync('npm', libraryPackArgs, { cwd: ROOT_DIR, stdio: 'inherit' })
  }

  // install test fixture dependencies and local packages
  execSync('npm install --save react-native-dotenv @react-native-community/netinfo react-native-file-access@3.0.4 @react-navigation/native @react-navigation/native-stack react-native-screens@3.19.0 react-native-safe-area-context@4.5.3 *.tgz', { cwd: fixtureDir, stdio: 'inherit' })
}

if (process.env.BUILD_ANDROID === 'true' || process.env.BUILD_ANDROID === '1') {
  if (process.env.RCT_NEW_ARCH_ENABLED === 'true' || process.env.RCT_NEW_ARCH_ENABLED === '1') {
    // If we're building with the new architecture, replace the gradle.properties file
    fs.copyFileSync(
      resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/android/newarch.gradle.properties'),
      resolve(fixtureDir, 'android/gradle.properties')
    )
  }

  // build the android app
  execFileSync('./gradlew', ['assembleRelease'], { cwd: `${fixtureDir}/android`, stdio: 'inherit' })
  fs.copyFileSync(`${fixtureDir}/android/app/build/outputs/apk/release/app-release.apk`, `${fixtureDir}/reactnative.apk`)
} 

if(process.env.BUILD_IOS === 'true' || process.env.BUILD_IOS === '1') {
  fs.rmSync(`${fixtureDir}/reactnative.xcarchive`, { recursive: true, force: true })

  // install pods
  execFileSync('pod', ['install'], { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })

  // build the ios app
  const archiveArgs = [
    'xcodebuild',
    'DEVELOPMENT_TEAM=7W9PZ27Y5F',
    '-workspace',
    'reactnative.xcworkspace',
    '-scheme',
    'reactnative',
    '-configuration',
    'Release',
    '-archivePath',
    `${fixtureDir}/reactnative.xcarchive`,
    '-allowProvisioningUpdates',
    'archive',
  ]

  execFileSync('xcrun', archiveArgs, { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })

  // export the archive
  const exportArgs = [
    'xcodebuild',
    '-exportArchive',
    '-archivePath',
    'reactnative.xcarchive',
    '-exportPath',
    'output/',
    '-exportOptionsPlist',
    'exportOptions.plist',
  ]

  execFileSync('xcrun', exportArgs, { cwd: fixtureDir, stdio: 'inherit' })
}
