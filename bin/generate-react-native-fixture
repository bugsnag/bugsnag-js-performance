#!/usr/bin/env node

const { execFileSync, execSync } = require('child_process')
const { resolve } = require('path')
const fs = require('fs')
const { modifyAndroidSource, modifyIosSource } = require('./rn-modify-source')

if (!process.env.RN_VERSION) {
  console.error('Please provide a React Native version')
  process.exit(1)
}

const reactNativeVersion = process.env.RN_VERSION
const ROOT_DIR = resolve(__dirname, '../')

let fixturePath = 'test/react-native/features/fixtures/generated/'
if (process.env.RCT_NEW_ARCH_ENABLED === 'true' || process.env.RCT_NEW_ARCH_ENABLED === '1') {
  fixturePath += 'new-arch/'
} else {
  fixturePath += 'old-arch/'
}

const fixtureDir = resolve(ROOT_DIR, fixturePath, reactNativeVersion)

const PACKAGE_NAMES = [
  '@bugsnag/core-performance',
  '@bugsnag/delivery-fetch-performance',
  '@bugsnag/plugin-react-native-navigation-performance',
  '@bugsnag/plugin-react-navigation-performance',
  '@bugsnag/react-native-performance',
  '@bugsnag/request-tracker-performance'
]

const PACKAGE_DIRECTORIES = [
  `${ROOT_DIR}/packages/core`,
  `${ROOT_DIR}/packages/delivery-fetch`,
  `${ROOT_DIR}/packages/platforms/react-native`,
  `${ROOT_DIR}/packages/plugin-react-native-navigation`,
  `${ROOT_DIR}/packages/plugin-react-navigation`,
  `${ROOT_DIR}/packages/request-tracker`,
  `${ROOT_DIR}/test/react-native/features/fixtures/scenario-launcher`
]

const DEPENDENCIES = [
  '@react-native-community/netinfo',
  'react-native-dotenv',
  'react-native-file-access@3.0.4' // Why this version specifically?
]

const REACT_NAVIGATION_DEPENDENCIES = [
  '@react-navigation/native',
  '@react-navigation/native-stack',
  'react-native-screens',
  'react-native-safe-area-context'
]

/** Install peer dependencies from this repo */
function installPeerDependencies() {
  // pack the required packages into the fixture directory
  for (const package of PACKAGE_DIRECTORIES) {
    const libraryPackArgs = ['pack', package, '--pack-destination', fixtureDir]
    execFileSync('npm', libraryPackArgs, { cwd: ROOT_DIR, stdio: 'inherit' })
  }

  const fixtureDependencyArgs = DEPENDENCIES.join(' ')

  // install test fixture dependencies and local packages
  execSync(`npm install --save ${fixtureDependencyArgs} *.tgz`, { cwd: fixtureDir, stdio: 'inherit' })
}

if (!process.env.SKIP_BUILD_PACKAGES) {
  // run npm install in the root directory
  execFileSync('npm', ['install'], { cwd: ROOT_DIR, stdio: 'inherit' })

  // build the packages
  const buildArgs = ['run', 'build', '--scope', PACKAGE_NAMES.join(' --scope ')]
  execFileSync('npm', buildArgs, { cwd: ROOT_DIR, stdio: 'inherit', env: { ...process.env, ENABLE_TEST_CONFIGURATION: 1 } })
}

if (!process.env.SKIP_GENERATE_FIXTURE) {
  // remove the fixture directory if it already exists
  if (fs.existsSync(fixtureDir)) {
    fs.rmSync(fixtureDir, { recursive: true, force: true })
  }

  // create the test fixture
  const RNInitArgs = ['react-native@latest', 'init', 'reactnative', '--package-name', 'com.bugsnag.fixtures.reactnative.performance', '--directory', fixtureDir, '--version', reactNativeVersion, '--npm', '--skip-install']
  execFileSync('npx', RNInitArgs, { stdio: 'inherit' })

  replaceNativeFiles()

  installPeerDependencies()
}

// Generate Android Fixture
if (process.env.BUILD_ANDROID === 'true' || process.env.BUILD_ANDROID === '1') {
  if (process.env.RCT_NEW_ARCH_ENABLED === 'true' || process.env.RCT_NEW_ARCH_ENABLED === '1') {
    // If we're building with the new architecture, replace the gradle.properties file
    fs.copyFileSync(
      resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/android/newarch.gradle.properties'),
      resolve(fixtureDir, 'android/gradle.properties')
    )
  }

  // Install Bugsnag using CLI script
  fs.copyFileSync(resolve(ROOT_DIR, 'bin', 'rn-cli-init-android.sh'), resolve(fixtureDir, 'rn-cli-init-android.sh'))
  execFileSync(`./rn-cli-init-android.sh`, [fixtureDir, reactNativeVersion], { cwd: fixtureDir, stdio: 'inherit' })

  // Remove the bugnsnag start code added by react-native-cli
  // TODO: Await this promise instead of using .then
  modifyAndroidSource(fixtureDir).then(() => {
    // build the android app
    execFileSync('./gradlew', ['assembleRelease'], { cwd: `${fixtureDir}/android`, stdio: 'inherit' })
    fs.copyFileSync(`${fixtureDir}/android/app/build/outputs/apk/release/app-release.apk`, `${fixtureDir}/reactnative.apk`)
  })
}

// Generate iOS Fixture
if (process.env.BUILD_IOS === 'true' || process.env.BUILD_IOS === '1') {
  fs.rmSync(`${fixtureDir}/reactnative.xcarchive`, { recursive: true, force: true })

  // Install Bugsnag using CLI script
  fs.copyFileSync(resolve(ROOT_DIR, 'bin', 'rn-cli-init-ios.sh'), resolve(fixtureDir, 'rn-cli-init-ios.sh'))
  execFileSync(`./rn-cli-init-ios.sh`, [fixtureDir, reactNativeVersion], { cwd: fixtureDir, stdio: 'inherit' })

  // install pods
  execFileSync('pod', ['install'], { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })

  modifyIosSource(fixtureDir).then(() => {
    // build the iOS app
    const archiveArgs = [
      'xcodebuild',
      'DEVELOPMENT_TEAM=7W9PZ27Y5F',
      '-workspace',
      'reactnative.xcworkspace',
      '-scheme',
      'reactnative',
      '-configuration',
      'Release',
      '-archivePath',
      `${fixtureDir}/reactnative.xcarchive`,
      '-allowProvisioningUpdates',
      'archive',
    ]
  
    execFileSync('xcrun', archiveArgs, { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })
  
    // export the archive
    const exportArgs = [
      'xcodebuild',
      '-exportArchive',
      '-archivePath',
      'reactnative.xcarchive',
      '-exportPath',
      'output/',
      '-exportOptionsPlist',
      'exportOptions.plist',
    ]
  
    execFileSync('xcrun', exportArgs, { cwd: fixtureDir, stdio: 'inherit' })
  })
}

/** Replace native files generated by react-native cli with pre-configured files */
function replaceNativeFiles() {
  fs.unlinkSync(resolve(fixtureDir, 'App.tsx'))
  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/App.js'),
    resolve(fixtureDir, 'App.js')
  )

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/android/AndroidManifest.xml'),
    resolve(fixtureDir, 'android/app/src/main/AndroidManifest.xml')
  )

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/android/ConfigFileReader.kt'),
    resolve(fixtureDir, 'android/app/src/main/java/com/bugsnag/fixtures/reactnative/performance/ConfigFileReader.kt')
  )

  // fs.copyFileSync(
  //   resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/ConfigFileReader.swift'),
  //   resolve(fixtureDir, 'ios/reactnative/ConfigFileReader.swift')
  // )

  // fs.copyFileSync(
  //   resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/Fixture.swift'),
  //   resolve(fixtureDir, 'ios/reactnative/Fixture.swift')
  // )

  // fs.copyFileSync(
  //   resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/Fixture.m'),
  //   resolve(fixtureDir, 'ios/reactnative/Fixture.m')
  // )

  // fs.copyFileSync(
  //   resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/Fixture-Bridging-Header.h'),
  //   resolve(fixtureDir, 'ios/reactnative/Fixture-Bridging-Header.h')
  // )

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/Info.plist'),
    resolve(fixtureDir, 'ios/reactnative/Info.plist')
  )

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/exportOptions.plist'),
    resolve(fixtureDir, 'exportOptions.plist')
  )

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/env'),
    resolve(fixtureDir, '.env')
  )

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/babel.config.js'),
    resolve(fixtureDir, 'babel.config.js')
  )

  // enable new architecture for android
  if (process.env.RCT_NEW_ARCH_ENABLED === 'true' || process.env.RCT_NEW_ARCH_ENABLED === '1') {
    fs.copyFileSync(
      resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/android/newarch.gradle.properties'),
      resolve(fixtureDir, 'android/gradle.properties')
    )
  }

  // react navigation setup
  if (!process.env.RCT_NEW_ARCH_ENABLED) {
    DEPENDENCIES.push(...REACT_NAVIGATION_DEPENDENCIES)

    const fileExtension = parseFloat(reactNativeVersion) < 0.73 ? 'java' : 'kt'
    fs.copyFileSync(
      resolve(ROOT_DIR, `test/react-native/features/fixtures/app/android/MainActivity.${reactNativeVersion}.${fileExtension}`),
      resolve(fixtureDir, `android/app/src/main/java/com/bugsnag/fixtures/reactnative/performance/MainActivity.${fileExtension}`)
    )
  }
}
