#!/usr/bin/env node

const { execFileSync, execSync } = require('child_process')
const { resolve } = require('path')
const fs = require('fs')
const util = require('util')

if (!process.env.RN_VERSION) {
  console.error('Please provide a React Native version')
  process.exit(1)
}

if (!process.env.NOTIFIER_VERSION) {
  console.error('Please provide a Notifier version')
  process.exit(1)
}

if (!process.env.RCT_NEW_ARCH_ENABLED || (process.env.RCT_NEW_ARCH_ENABLED !== '1' && process.env.RCT_NEW_ARCH_ENABLED !== '0')) {
  console.error('RCT_NEW_ARCH_ENABLED must be set to 1 or 0')
  process.exit(1)
}

const reactNativeVersion = process.env.RN_VERSION
const ROOT_DIR = resolve(__dirname, '../')

const isNewArchEnabled = process.env.RCT_NEW_ARCH_ENABLED === '1'

let fixturePath = 'test/react-native/features/fixtures/generated/'
if (process.env.REACT_NATIVE_NAVIGATION === 'true' || process.env.REACT_NATIVE_NAVIGATION === '1') {
  fixturePath += 'react-native-navigation/'
}

if (process.env.NATIVE_INTEGRATION) {
  fixturePath += 'native-integration/'
}

if (isNewArchEnabled) {
  fixturePath += 'new-arch/'
} else {
  fixturePath += 'old-arch/'
}

const fixtureDir = resolve(ROOT_DIR, fixturePath, reactNativeVersion)

const PACKAGE_NAMES = [
  '@bugsnag/core-performance',
  '@bugsnag/delivery-fetch-performance',
  '@bugsnag/plugin-react-native-navigation-performance',
  '@bugsnag/plugin-react-native-native-spans',
  '@bugsnag/plugin-react-navigation-performance',
  '@bugsnag/react-native-performance',
  '@bugsnag/request-tracker-performance',
  '@bugsnag/plugin-named-spans',
]

const PACKAGE_DIRECTORIES = [
  `${ROOT_DIR}/packages/core`,
  `${ROOT_DIR}/packages/delivery-fetch`,
  `${ROOT_DIR}/packages/platforms/react-native`,
  `${ROOT_DIR}/packages/plugin-react-native-navigation`,
  `${ROOT_DIR}/packages/plugin-react-native-native-spans`,
  `${ROOT_DIR}/packages/plugin-react-navigation`,
  `${ROOT_DIR}/packages/request-tracker`,
  `${ROOT_DIR}/packages/plugin-named-spans`,
  `${ROOT_DIR}/test/react-native/features/fixtures/scenario-launcher`
]

// make sure we install a compatible versions of peer dependencies
const reactNativeFileAccessVersion = parseFloat(reactNativeVersion) <= 0.64 ? '1.7.1' : '3.1.1'
const netinfoVersion = parseFloat(reactNativeVersion) <= 0.64 ? '10.0.0' : '11.3.2'
const DEPENDENCIES = [
  `@bugsnag/react-native@${process.env.NOTIFIER_VERSION}`,
  `@react-native-community/netinfo@${netinfoVersion}`,
  `react-native-file-access@${reactNativeFileAccessVersion}`
]

let reactNavigationVersion = '6.1.18'
let reactNavigationNativeStackVersion = '6.11.0'
let reactNativeScreensVersion = '3.35.0'
let reactNativeSafeAreaContextVersion = '4.14.0'

// RN 0.77 requires react-native-screens 4.6.0, which in turn requires react navigation v7
if (parseFloat(reactNativeVersion) >= 0.77) {
  reactNavigationVersion = '7.0.14'
  reactNavigationNativeStackVersion = '7.2.0'
  reactNativeScreensVersion = '4.9.0'
  reactNativeSafeAreaContextVersion = '5.2.0'
} else if (parseFloat(reactNativeVersion) <= 0.64) {
  reactNativeScreensVersion = '3.14.0'
  reactNativeSafeAreaContextVersion = '4.3.4'
}

const REACT_NAVIGATION_DEPENDENCIES = [
  `@react-navigation/native@${reactNavigationVersion}`,
  `@react-navigation/native-stack@${reactNavigationNativeStackVersion}`,
  `react-native-screens@${reactNativeScreensVersion}`,
  `react-native-safe-area-context@${reactNativeSafeAreaContextVersion}`
]

const REACT_NATIVE_NAVIGATION_DEPENDENCIES = [
  `react-native-navigation@7.37.2` // INVESTIGATE: higher than 7.37.2 causes a build error
]

// add dependencies for react-native-navigation (wix)
if (process.env.REACT_NATIVE_NAVIGATION === 'true' || process.env.REACT_NATIVE_NAVIGATION === '1') {
  DEPENDENCIES.push(...REACT_NATIVE_NAVIGATION_DEPENDENCIES)
} else if (!isNewArchEnabled) {
  // add dependencies for @react-navigation
  DEPENDENCIES.push(...REACT_NAVIGATION_DEPENDENCIES)
}

if (!process.env.SKIP_BUILD_PACKAGES) {
  // run npm install in the root directory
  execFileSync('npm', ['install'], { cwd: ROOT_DIR, stdio: 'inherit' })

  // build the packages
  const buildArgs = ['run', 'build', '--scope', PACKAGE_NAMES.join(' --scope ')]
  execFileSync('npm', buildArgs, { cwd: ROOT_DIR, stdio: 'inherit', env: { ...process.env, ENABLE_TEST_CONFIGURATION: 1 } })
}

if (!process.env.SKIP_GENERATE_FIXTURE) {
  // remove the fixture directory if it already exists
  if (fs.existsSync(fixtureDir)) {
    fs.rmSync(fixtureDir, { recursive: true, force: true })
  }

  // create the test fixture
  const RNInitArgs = ['@react-native-community/cli@16', 'init', 'reactnative', '--package-name', 'com.bugsnag.fixtures.reactnative.performance', '--directory', fixtureDir, '--version', reactNativeVersion, '--pm', 'npm', '--skip-install']
  execFileSync('npx', RNInitArgs, { stdio: 'inherit' })

  replaceGeneratedFixtureFiles()

  configureAndroidProject()

  configureIOSProject()

  installFixtureDependencies()

  // apply additional modifications required for RN 0.64
  if (parseFloat(reactNativeVersion) === 0.64) {
    configureRN064Fixture(fixtureDir)
  }

  if (process.env.NATIVE_INTEGRATION === '1') {
    installAndroidPerformance()
    installCocoaPerformance()
  }

  // link react-native-navigation using rnn-link tool
  if (process.env.REACT_NATIVE_NAVIGATION === 'true' || process.env.REACT_NATIVE_NAVIGATION === '1') {
    execSync('npx rnn-link', { cwd: fixtureDir, stdio: 'inherit' })
  }
}

// generate Android Fixture
if (process.env.BUILD_ANDROID === 'true' || process.env.BUILD_ANDROID === '1') {
  // build and publish bugsnag-android-performance to local maven repo
  // this is required even if we're not building the native integration fixture because
  // @bugsnag/react-native-performance has a compileOnly dependency on bugsnag-android-performance
  // TODO: remove this once changes have been released in bugsnag-android-performance
  publishLocalAndroidPerformance()

  execFileSync('./gradlew', ['assembleRelease'], { cwd: `${fixtureDir}/android`, stdio: 'inherit' })
  fs.copyFileSync(`${fixtureDir}/android/app/build/outputs/apk/release/app-release.apk`, `${fixtureDir}/reactnative.apk`)
}

// generate iOS Fixture
if (process.env.BUILD_IOS === 'true' || process.env.BUILD_IOS === '1') {
  fs.rmSync(`${fixtureDir}/reactnative.xcarchive`, { recursive: true, force: true })

  // install pods
  execFileSync('bundle', ['install'], { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })
  execFileSync('bundle', ['exec', 'pod', 'install'], { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })

  // build the iOS app
  const archiveArgs = [
    'xcodebuild',
    'DEVELOPMENT_TEAM=7W9PZ27Y5F',
    '-workspace',
    'reactnative.xcworkspace',
    '-scheme',
    'reactnative',
    '-configuration',
    'Release',
    '-archivePath',
    `${fixtureDir}/reactnative.xcarchive`,
    '-allowProvisioningUpdates',
    'archive',
  ]

  execFileSync('xcrun', archiveArgs, { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })

  // export the archive
  const exportArgs = [
    'xcodebuild',
    '-exportArchive',
    '-archivePath',
    'reactnative.xcarchive',
    '-exportPath',
    'output/',
    '-exportOptionsPlist',
    'exportOptions.plist',
  ]

  execFileSync('xcrun', exportArgs, { cwd: fixtureDir, stdio: 'inherit' })
}

/** Update fixture configuration to support React Native 0.64 */
function configureRN064Fixture(fixtureDir) {
  // Android
  const gradlePath = resolve(fixtureDir, 'android/build.gradle')
  let gradle = fs.readFileSync(gradlePath, 'utf8')

  // add kotlinVersion = "1.4.10" to the buildscript ext block
  const buildscriptExt = 'ext {'
  const kotlinVersion = 'kotlinVersion = "1.4.10"'
  gradle = gradle.replace(buildscriptExt, `${buildscriptExt}\n        ${kotlinVersion}`)

  // bump android sdk version to 30
  gradle = gradle.replace(/compileSdkVersion = 29/, 'compileSdkVersion = 30').replace(/targetSdkVersion = 29/, 'targetSdkVersion = 30')

  fs.writeFileSync(gradlePath, gradle)

  const moduleGradlePath = resolve(fixtureDir, 'android/app/build.gradle')
  let moduleGradle = fs.readFileSync(moduleGradlePath, 'utf8')

  // enable hermes and set --openssl-legacy-provider node option
  const currentReactConfig = `project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]`

  const updatedReactConfig = `project.ext.react = [
    enableHermes: true,
    nodeExecutableAndArgs: ["node", "--openssl-legacy-provider"]
  ]`

  // remove flipper and associated dependencies
  fs.rmdirSync(resolve(fixtureDir, 'android/app/src/debug/java'), { recursive: true, force: true })
  const flipperDependencies = `debugImplementation("com.facebook.flipper:flipper:\${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:\${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:\${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }`

  moduleGradle = moduleGradle.replace(currentReactConfig, updatedReactConfig).replace(flipperDependencies, '')
  fs.writeFileSync(moduleGradlePath, moduleGradle)

  // set --openssl-legacy-provider node option in pbxproj file
  const pbxprojPath = resolve(fixtureDir, 'ios/reactnative.xcodeproj/project.pbxproj')
  let pbxproj = fs.readFileSync(pbxprojPath, 'utf8')
  pbxproj = pbxproj.replace('export NODE_BINARY=node\\n', 'export NODE_BINARY=node\\nexport NODE_OPTIONS=--openssl-legacy-provider\\n')
  fs.writeFileSync(pbxprojPath, pbxproj)

  //  set --openssl-legacy-provider node option in .npmrc file (this is only needed for running the test fixture locally)
  fs.writeFileSync(resolve(fixtureDir, '.npmrc'), 'node-options="--openssl-legacy-provider"\n')

  // fix Yoga.cpp issue with Xcode 14.3+ (see https://github.com/facebook/react-native/issues/36758)
  const yogaCppPath = resolve(fixtureDir, 'node_modules/react-native/ReactCommon/yoga/yoga/Yoga.cpp')
  let yogaCpp = fs.readFileSync(yogaCppPath, 'utf8')
  yogaCpp = yogaCpp.replace('node->getLayout().hadOverflow() |', 'node->getLayout().hadOverflow() ||')
  fs.writeFileSync(yogaCppPath, yogaCpp)

  // copy gemfile
  fs.copyFileSync(resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/Gemfile'), resolve(fixtureDir, 'Gemfile'))
}

/** Pack and install local packages from this repo */
function installFixtureDependencies() {
  // pack the required packages into the fixture directory
  for (const package of PACKAGE_DIRECTORIES) {
    const libraryPackArgs = ['pack', package, '--pack-destination', fixtureDir]
    execFileSync('npm', libraryPackArgs, { cwd: ROOT_DIR, stdio: 'inherit' })
  }

  const fixtureDependencyArgs = DEPENDENCIES.join(' ')

  // install test fixture dependencies and local packages
  execSync(`npm install --save ${fixtureDependencyArgs} *.tgz`, { cwd: fixtureDir, stdio: 'inherit' })
}

/** Replace native files generated by react-native cli with pre-configured files */
function replaceGeneratedFixtureFiles() {
  // replace the App.tsx/App.js file with our own App.js file
  const appTsFilePath = resolve(fixtureDir, 'App.tsx')
  const appJsFilePath = resolve(fixtureDir, 'App.js')
  if (fs.existsSync(appTsFilePath)) fs.unlinkSync(appTsFilePath)
  if (fs.existsSync(appJsFilePath)) fs.unlinkSync(appJsFilePath)

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/App.js'),
    resolve(fixtureDir, 'App.js')
  )

  if (process.env.REACT_NATIVE_NAVIGATION === 'true' || process.env.REACT_NATIVE_NAVIGATION === '1') {
    fs.copyFileSync(
      resolve(ROOT_DIR, 'test/react-native/features/fixtures/react-native-navigation/index.js'),
      resolve(fixtureDir, 'index.js')
    )
  } else {
    fs.copyFileSync(
      resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/index.js'),
      resolve(fixtureDir, 'index.js')
    )
  }

  fs.copyFileSync(
    resolve(ROOT_DIR, 'test/react-native/features/fixtures/app/ios/exportOptions.plist'),
    resolve(fixtureDir, 'exportOptions.plist')
  )

  const babelConfig = require(resolve(fixtureDir, 'babel.config.js'))
  if (!babelConfig.plugins) babelConfig.plugins = []
  babelConfig.plugins.push('@babel/plugin-transform-export-namespace-from')
  fs.writeFileSync(resolve(fixtureDir, 'babel.config.js'), `module.exports = ${util.inspect(babelConfig)}`)
}

function configureIOSProject() {
  // disable Flipper
  let podfileContents = fs.readFileSync(`${fixtureDir}/ios/Podfile`, 'utf8')
  if (podfileContents.includes('use_flipper!')) {
    podfileContents = podfileContents.replace(/use_flipper!/, '# use_flipper!')
  } else if (podfileContents.includes(':flipper_configuration')) {
    podfileContents = podfileContents.replace(/:flipper_configuration/, '# :flipper_configuration')
  }

  // for RN versions < 0.73, bump the minimum iOS version to 13 (required for Cocoa Performance)
  if (parseFloat(reactNativeVersion) < 0.73) {
    podfileContents = podfileContents.replace(/platform\s*:ios,\s*(?:'[\d.]+'|min_ios_version_supported)/, "platform :ios, '13.0'")
  }

  fs.writeFileSync(`${fixtureDir}/ios/Podfile`, podfileContents)

  // pin xcodeproj version to < 1.26.0
  const gemfilePath = resolve(fixtureDir, 'Gemfile')
  if (fs.existsSync(gemfilePath)) {
    let gemfileContents = fs.readFileSync(gemfilePath, 'utf8')
    if (!gemfileContents.includes('xcodeproj')) {
      gemfileContents += `\ngem 'xcodeproj', '< 1.26.0'`
    }
    if (!gemfileContents.includes('concurrent-ruby')) {
      gemfileContents += `\ngem 'concurrent-ruby', '<= 1.3.4'`
    }
    fs.writeFileSync(gemfilePath, gemfileContents)
  }

  // set NSAllowsArbitraryLoads to allow http traffic for all domains (bitbar public IP + bs-local.com)
  const plistpath = `${fixtureDir}/ios/reactnative/Info.plist`
  let plistContents = fs.readFileSync(plistpath, 'utf8')
  const allowArbitraryLoads = '<key>NSAllowsArbitraryLoads</key>\n\t\t<true/>'
  let searchPattern, replacement
  if (plistContents.includes('<key>NSAllowsArbitraryLoads</key>')) {
    searchPattern = '<key>NSAllowsArbitraryLoads</key>\n\t\t<false/>'
    replacement = allowArbitraryLoads
  } else {
    searchPattern = '<key>NSAppTransportSecurity</key>\n\t<dict>'
    replacement = `${searchPattern}\n\t\t${allowArbitraryLoads}`
  }

  // remove the NSAllowsLocalNetworking key if it exists as this causes NSAllowsArbitraryLoads to be ignored
  const allowLocalNetworking = '<key>NSAllowsLocalNetworking</key>\n\t\t<true/>'
  plistContents = plistContents.replace(allowLocalNetworking, '')

  fs.writeFileSync(plistpath, plistContents.replace(searchPattern, replacement))
}

function configureAndroidProject() {
  // set android:usesCleartextTraffic="true" in AndroidManifest.xml
  const androidManifestPath = `${fixtureDir}/android/app/src/main/AndroidManifest.xml`
  let androidManifestContents = fs.readFileSync(androidManifestPath, 'utf8')
  androidManifestContents = androidManifestContents.replace('<application', '<application android:usesCleartextTraffic="true"')
  fs.writeFileSync(androidManifestPath, androidManifestContents)

  // enable/disable the new architecture in gradle.properties
  const gradlePropertiesPath = `${fixtureDir}/android/gradle.properties`
  let gradlePropertiesContents = fs.readFileSync(gradlePropertiesPath, 'utf8')
  gradlePropertiesContents = gradlePropertiesContents.replace(/newArchEnabled\s*=\s*(true|false)/, `newArchEnabled=${isNewArchEnabled}`)
  fs.writeFileSync(gradlePropertiesPath, gradlePropertiesContents)

  if (!isNewArchEnabled) {
    // react navigation setup
    configureReactNavigationAndroid()
  }
}

function installAndroidPerformance() {
  // declare dependency in the app/build.gradle file
  const appGradlePath = resolve(fixtureDir, 'android/app/build.gradle')
  let appGradle = fs.readFileSync(appGradlePath, 'utf8')

  const performanceDependency = 'implementation("com.bugsnag:bugsnag-android-performance:9.9.9")'
  const dependenciesSection = 'dependencies {'

  appGradle = appGradle.replace(dependenciesSection, `${dependenciesSection}\n    ${performanceDependency}`)
  fs.writeFileSync(appGradlePath, appGradle)
}

function installCocoaPerformance() {
  // add 'pod "BugsnagPerformance"' to the Podfile
  const podfilePath = resolve(fixtureDir, 'ios/Podfile')
  let podfile = fs.readFileSync(podfilePath, 'utf8')

  const performancePod = `pod 'BugsnagPerformance'`
  const targetSection = 'target \'reactnative\' do'

  podfile = podfile.replace(targetSection, `${targetSection}\n  ${performancePod}`)
  fs.writeFileSync(podfilePath, podfile)
}

function configureReactNavigationAndroid () {
  const fileExtension = parseFloat(reactNativeVersion) < 0.73 ? 'java' : 'kt'
  let mainActivityPattern, mainActivityReplacement
  if (fileExtension === 'java') {
    mainActivityPattern = 'public class MainActivity extends ReactActivity {'
    mainActivityReplacement = `
import android.os.Bundle;

public class MainActivity extends ReactActivity {

  /**
   * Required for react-navigation/native implementation
   * https://reactnavigation.org/docs/getting-started/#installing-dependencies-into-a-bare-react-native-project
   */
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(null);
  }
`
  } else if (fileExtension === 'kt') {
    mainActivityPattern = 'class MainActivity : ReactActivity() {'
    mainActivityReplacement = `
import android.os.Bundle

class MainActivity : ReactActivity() {

  /**
   * Required for react-navigation/native implementation
   * https://reactnavigation.org/docs/getting-started/#installing-dependencies-into-a-bare-react-native-project
   */
  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(null)
  }
`
  }

  const mainActivityPath = `${fixtureDir}/android/app/src/main/java/com/bugsnag/fixtures/reactnative/performance/MainActivity.${fileExtension}`
  let mainActivityContents = fs.readFileSync(mainActivityPath, 'utf8')
  mainActivityContents = mainActivityContents.replace(mainActivityPattern, mainActivityReplacement)
  fs.writeFileSync(mainActivityPath, mainActivityContents)
}

function publishLocalAndroidPerformance() {
  // add bugsnag-android-performance as a git submodule
  execSync(`git submodule add -b integration/appstart-type https://github.com/bugsnag/bugsnag-android-performance`, { cwd: fixtureDir, stdio: 'inherit' })

  // build and publish bugsnag-android-performance to maven local
  execSync(`./gradlew -PVERSION_NAME=9.9.9 clean publishToMavenLocal`, { cwd: `${fixtureDir}/bugsnag-android-performance`, stdio: 'inherit' })

  // add mavenLocal() to the repositories section in the android/build.gradle file
  const buildGradlePath = resolve(fixtureDir, 'android/build.gradle')
  let buildGradle = fs.readFileSync(buildGradlePath, 'utf8')
  const repositoriesBlock = `allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
    google()
  }
}`

  buildGradle = `${repositoriesBlock}\n${buildGradle}`
  fs.writeFileSync(buildGradlePath, buildGradle)
}
