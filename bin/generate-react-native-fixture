#!/usr/bin/env node

const { execSync } = require('child_process')
const { resolve } = require('path')
const fs = require('fs')

if (!process.env.RN_VERSION) {
  console.error('Please provide a React Native version')
  process.exit(1)
}

const rnVersion = process.env.RN_VERSION
const fixtureDir = resolve(__dirname, '../build/react-native/', rnVersion)

if (!process.env.SKIP_GENERATE_FIXTURE) {
    // remove the fixture directory if it already exists
  if (fs.existsSync(fixtureDir)) {
    execSync(`rm -rf ${fixtureDir}`, { stdio: 'inherit' })
  }

  // create the test fixture
  execSync(
    `npx react-native init reactnative --package-name com.bugsnag.fixtures.reactnative.performance --directory ${fixtureDir} --version ${rnVersion} --npm --skip-install`,
    { stdio: 'inherit' }
  )

  // replace the App.tsx file with our own App.js file
  fs.unlinkSync(resolve(fixtureDir, 'App.tsx'))
  fs.copyFileSync(
    resolve(__dirname, '../test/react-native/features/fixtures/app/App.js'),
    resolve(fixtureDir, 'App.js')
  )

  // replace the AndroidManifest.xml file with our own
  fs.copyFileSync(
    resolve(__dirname, '../test/react-native/features/fixtures/app/android/AndroidManifest.xml'),
    resolve(fixtureDir, 'android/app/src/main/AndroidManifest.xml')
  )

  // replace the Info.plist file with our own
  fs.copyFileSync(
    resolve(__dirname, '../test/react-native/features/fixtures/app/ios/Info.plist'),
    resolve(fixtureDir, 'ios/reactnative/Info.plist')
  )

  // copy the exportOptions.plist file
  fs.copyFileSync(
    resolve(__dirname, '../test/react-native/features/fixtures/app/ios/exportOptions.plist'),
    resolve(fixtureDir, 'exportOptions.plist')
  )

  // install react-native-file-access
  execSync('npm install --save react-native-file-access@3.0.4', { cwd: fixtureDir, stdio: 'inherit' })

  // pack the scenarios into the fixture directory and install
  const scenariosDir = resolve(__dirname, '../test/react-native/features/fixtures/performance-scenarios')
  execSync(`npm pack ${scenariosDir} --pack-destination ${fixtureDir}`, { stdio: 'inherit' })
  execSync('npm install ./bugsnag-react-native-performance-scenarios-1.0.0.tgz', { cwd: fixtureDir, stdio: 'inherit' })
}

if (process.env.BUILD_ANDROID === 'true' || process.env.BUILD_ANDROID === '1') {
  // build the android app
  execSync(`./gradlew assembleRelease`, { cwd: `${fixtureDir}/android`, stdio: 'inherit' })
  fs.copyFileSync(`${fixtureDir}/android/app/build/outputs/apk/release/app-release.apk`, `${fixtureDir}/reactnative.apk`)
} 

if(process.env.BUILD_IOS === 'true' || process.env.BUILD_IOS === '1') {
  execSync('rm -rf reactnative.xcarchive', { cwd: fixtureDir, stdio: 'inherit' })

  // install pods
  execSync('pod install', { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })

  // build the ios app
  execSync(`xcrun xcodebuild DEVELOPMENT_TEAM=7W9PZ27Y5F \
  -workspace reactnative.xcworkspace \
  -scheme reactnative \
  -configuration Release \
  -archivePath ${fixtureDir}/reactnative.xcarchive \
  -allowProvisioningUpdates \
  archive`,
  { cwd: `${fixtureDir}/ios`, stdio: 'inherit' })

  // export the archive
  execSync('xcrun xcodebuild \
  -exportArchive \
  -archivePath reactnative.xcarchive \
  -exportPath output/ \
  -exportOptionsPlist exportOptions.plist',
  { cwd: `${fixtureDir}`, stdio: 'inherit' })
}
